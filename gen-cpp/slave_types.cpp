/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "slave_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rpc { namespace slave {


RsyncRequest::~RsyncRequest() throw() {
}


void RsyncRequest::__set_database(const std::string& val) {
  this->database = val;
}

void RsyncRequest::__set_sql_file(const std::string& val) {
  this->sql_file = val;
}

void RsyncRequest::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const RsyncRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RsyncRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->database);
          this->__isset.database = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sql_file);
          this->__isset.sql_file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RsyncRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RsyncRequest");

  xfer += oprot->writeFieldBegin("database", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->database);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sql_file", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sql_file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RsyncRequest &a, RsyncRequest &b) {
  using ::std::swap;
  swap(a.database, b.database);
  swap(a.sql_file, b.sql_file);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

RsyncRequest::RsyncRequest(const RsyncRequest& other0) {
  database = other0.database;
  sql_file = other0.sql_file;
  message = other0.message;
  __isset = other0.__isset;
}
RsyncRequest& RsyncRequest::operator=(const RsyncRequest& other1) {
  database = other1.database;
  sql_file = other1.sql_file;
  message = other1.message;
  __isset = other1.__isset;
  return *this;
}
void RsyncRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RsyncRequest(";
  out << "database=" << to_string(database);
  out << ", " << "sql_file=" << to_string(sql_file);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


RsyncResponse::~RsyncResponse() throw() {
}


void RsyncResponse::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const RsyncResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RsyncResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RsyncResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RsyncResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RsyncResponse &a, RsyncResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

RsyncResponse::RsyncResponse(const RsyncResponse& other2) {
  message = other2.message;
  __isset = other2.__isset;
}
RsyncResponse& RsyncResponse::operator=(const RsyncResponse& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void RsyncResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RsyncResponse(";
  out << "message=" << to_string(message);
  out << ")";
}


TryRequest::~TryRequest() throw() {
}


void TryRequest::__set_call_func(const std::string& val) {
  this->call_func = val;
}

void TryRequest::__set_key(const std::string& val) {
  this->key = val;
}
std::ostream& operator<<(std::ostream& out, const TryRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TryRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->call_func);
          this->__isset.call_func = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TryRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TryRequest");

  xfer += oprot->writeFieldBegin("call_func", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->call_func);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TryRequest &a, TryRequest &b) {
  using ::std::swap;
  swap(a.call_func, b.call_func);
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

TryRequest::TryRequest(const TryRequest& other4) {
  call_func = other4.call_func;
  key = other4.key;
  __isset = other4.__isset;
}
TryRequest& TryRequest::operator=(const TryRequest& other5) {
  call_func = other5.call_func;
  key = other5.key;
  __isset = other5.__isset;
  return *this;
}
void TryRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TryRequest(";
  out << "call_func=" << to_string(call_func);
  out << ", " << "key=" << to_string(key);
  out << ")";
}


TryResponse::~TryResponse() throw() {
}


void TryResponse::__set_message(const std::string& val) {
  this->message = val;
}

void TryResponse::__set_check_key(const bool val) {
  this->check_key = val;
}
std::ostream& operator<<(std::ostream& out, const TryResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TryResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->check_key);
          this->__isset.check_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TryResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TryResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("check_key", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->check_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TryResponse &a, TryResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.check_key, b.check_key);
  swap(a.__isset, b.__isset);
}

TryResponse::TryResponse(const TryResponse& other6) {
  message = other6.message;
  check_key = other6.check_key;
  __isset = other6.__isset;
}
TryResponse& TryResponse::operator=(const TryResponse& other7) {
  message = other7.message;
  check_key = other7.check_key;
  __isset = other7.__isset;
  return *this;
}
void TryResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TryResponse(";
  out << "message=" << to_string(message);
  out << ", " << "check_key=" << to_string(check_key);
  out << ")";
}


FinishRequest::~FinishRequest() throw() {
}


void FinishRequest::__set_connection_id(const int64_t val) {
  this->connection_id = val;
}

void FinishRequest::__set_message(const std::string& val) {
  this->message = val;
}

void FinishRequest::__set_call_func(const std::string& val) {
  this->call_func = val;
}
std::ostream& operator<<(std::ostream& out, const FinishRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FinishRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->connection_id);
          this->__isset.connection_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->call_func);
          this->__isset.call_func = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FinishRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FinishRequest");

  xfer += oprot->writeFieldBegin("connection_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->connection_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("call_func", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->call_func);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FinishRequest &a, FinishRequest &b) {
  using ::std::swap;
  swap(a.connection_id, b.connection_id);
  swap(a.message, b.message);
  swap(a.call_func, b.call_func);
  swap(a.__isset, b.__isset);
}

FinishRequest::FinishRequest(const FinishRequest& other8) {
  connection_id = other8.connection_id;
  message = other8.message;
  call_func = other8.call_func;
  __isset = other8.__isset;
}
FinishRequest& FinishRequest::operator=(const FinishRequest& other9) {
  connection_id = other9.connection_id;
  message = other9.message;
  call_func = other9.call_func;
  __isset = other9.__isset;
  return *this;
}
void FinishRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FinishRequest(";
  out << "connection_id=" << to_string(connection_id);
  out << ", " << "message=" << to_string(message);
  out << ", " << "call_func=" << to_string(call_func);
  out << ")";
}


FinishResponse::~FinishResponse() throw() {
}


void FinishResponse::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const FinishResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FinishResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FinishResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FinishResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FinishResponse &a, FinishResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

FinishResponse::FinishResponse(const FinishResponse& other10) {
  message = other10.message;
  __isset = other10.__isset;
}
FinishResponse& FinishResponse::operator=(const FinishResponse& other11) {
  message = other11.message;
  __isset = other11.__isset;
  return *this;
}
void FinishResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FinishResponse(";
  out << "message=" << to_string(message);
  out << ")";
}

}} // namespace
