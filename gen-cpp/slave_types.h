/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef slave_TYPES_H
#define slave_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "master_types.h"


namespace rpc { namespace slave {

class Sql;

class RsyncRequest;

class RsyncResponse;

class TryRequest;

class TryResponse;

class FinishRequest;

class FinishResponse;

typedef struct _Sql__isset {
  _Sql__isset() : command(false), key(false), value(false) {}
  bool command :1;
  bool key :1;
  bool value :1;
} _Sql__isset;

class Sql : public virtual ::apache::thrift::TBase {
 public:

  Sql(const Sql&);
  Sql& operator=(const Sql&);
  Sql() : command(), key(), value() {
  }

  virtual ~Sql() throw();
  std::string command;
  std::string key;
  std::string value;

  _Sql__isset __isset;

  void __set_command(const std::string& val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const Sql & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Sql &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sql & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Sql &a, Sql &b);

std::ostream& operator<<(std::ostream& out, const Sql& obj);

typedef struct _RsyncRequest__isset {
  _RsyncRequest__isset() : sql(false), message(false) {}
  bool sql :1;
  bool message :1;
} _RsyncRequest__isset;

class RsyncRequest : public virtual ::apache::thrift::TBase {
 public:

  RsyncRequest(const RsyncRequest&);
  RsyncRequest& operator=(const RsyncRequest&);
  RsyncRequest() : message() {
  }

  virtual ~RsyncRequest() throw();
  std::vector<Sql>  sql;
  std::string message;

  _RsyncRequest__isset __isset;

  void __set_sql(const std::vector<Sql> & val);

  void __set_message(const std::string& val);

  bool operator == (const RsyncRequest & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RsyncRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RsyncRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RsyncRequest &a, RsyncRequest &b);

std::ostream& operator<<(std::ostream& out, const RsyncRequest& obj);

typedef struct _RsyncResponse__isset {
  _RsyncResponse__isset() : message(false) {}
  bool message :1;
} _RsyncResponse__isset;

class RsyncResponse : public virtual ::apache::thrift::TBase {
 public:

  RsyncResponse(const RsyncResponse&);
  RsyncResponse& operator=(const RsyncResponse&);
  RsyncResponse() : message() {
  }

  virtual ~RsyncResponse() throw();
  std::string message;

  _RsyncResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const RsyncResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RsyncResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RsyncResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RsyncResponse &a, RsyncResponse &b);

std::ostream& operator<<(std::ostream& out, const RsyncResponse& obj);

typedef struct _TryRequest__isset {
  _TryRequest__isset() : call_func(false), key(false) {}
  bool call_func :1;
  bool key :1;
} _TryRequest__isset;

class TryRequest : public virtual ::apache::thrift::TBase {
 public:

  TryRequest(const TryRequest&);
  TryRequest& operator=(const TryRequest&);
  TryRequest() : call_func(), key() {
  }

  virtual ~TryRequest() throw();
  std::string call_func;
  std::string key;

  _TryRequest__isset __isset;

  void __set_call_func(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const TryRequest & rhs) const
  {
    if (!(call_func == rhs.call_func))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TryRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TryRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TryRequest &a, TryRequest &b);

std::ostream& operator<<(std::ostream& out, const TryRequest& obj);

typedef struct _TryResponse__isset {
  _TryResponse__isset() : message(false), check_key(false) {}
  bool message :1;
  bool check_key :1;
} _TryResponse__isset;

class TryResponse : public virtual ::apache::thrift::TBase {
 public:

  TryResponse(const TryResponse&);
  TryResponse& operator=(const TryResponse&);
  TryResponse() : message(), check_key(0) {
  }

  virtual ~TryResponse() throw();
  std::string message;
  bool check_key;

  _TryResponse__isset __isset;

  void __set_message(const std::string& val);

  void __set_check_key(const bool val);

  bool operator == (const TryResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(check_key == rhs.check_key))
      return false;
    return true;
  }
  bool operator != (const TryResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TryResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TryResponse &a, TryResponse &b);

std::ostream& operator<<(std::ostream& out, const TryResponse& obj);

typedef struct _FinishRequest__isset {
  _FinishRequest__isset() : connection_id(false), message(false), call_func(false) {}
  bool connection_id :1;
  bool message :1;
  bool call_func :1;
} _FinishRequest__isset;

class FinishRequest : public virtual ::apache::thrift::TBase {
 public:

  FinishRequest(const FinishRequest&);
  FinishRequest& operator=(const FinishRequest&);
  FinishRequest() : connection_id(0), message(), call_func() {
  }

  virtual ~FinishRequest() throw();
  int64_t connection_id;
  std::string message;
  std::string call_func;

  _FinishRequest__isset __isset;

  void __set_connection_id(const int64_t val);

  void __set_message(const std::string& val);

  void __set_call_func(const std::string& val);

  bool operator == (const FinishRequest & rhs) const
  {
    if (!(connection_id == rhs.connection_id))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(call_func == rhs.call_func))
      return false;
    return true;
  }
  bool operator != (const FinishRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FinishRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FinishRequest &a, FinishRequest &b);

std::ostream& operator<<(std::ostream& out, const FinishRequest& obj);

typedef struct _FinishResponse__isset {
  _FinishResponse__isset() : message(false) {}
  bool message :1;
} _FinishResponse__isset;

class FinishResponse : public virtual ::apache::thrift::TBase {
 public:

  FinishResponse(const FinishResponse&);
  FinishResponse& operator=(const FinishResponse&);
  FinishResponse() : message() {
  }

  virtual ~FinishResponse() throw();
  std::string message;

  _FinishResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const FinishResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const FinishResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FinishResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FinishResponse &a, FinishResponse &b);

std::ostream& operator<<(std::ostream& out, const FinishResponse& obj);

}} // namespace

#endif
