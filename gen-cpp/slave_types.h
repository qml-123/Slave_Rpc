/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef slave_TYPES_H
#define slave_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "master_types.h"


namespace rpc { namespace slave {

class RsyncRequest;

class RsyncResponse;

class TryRequest;

class TryResponse;

typedef struct _RsyncRequest__isset {
  _RsyncRequest__isset() : database(false), sql_file(false), message(false) {}
  bool database :1;
  bool sql_file :1;
  bool message :1;
} _RsyncRequest__isset;

class RsyncRequest : public virtual ::apache::thrift::TBase {
 public:

  RsyncRequest(const RsyncRequest&);
  RsyncRequest& operator=(const RsyncRequest&);
  RsyncRequest() : database(), sql_file(), message() {
  }

  virtual ~RsyncRequest() throw();
  std::string database;
  std::string sql_file;
  std::string message;

  _RsyncRequest__isset __isset;

  void __set_database(const std::string& val);

  void __set_sql_file(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const RsyncRequest & rhs) const
  {
    if (!(database == rhs.database))
      return false;
    if (!(sql_file == rhs.sql_file))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RsyncRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RsyncRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RsyncRequest &a, RsyncRequest &b);

std::ostream& operator<<(std::ostream& out, const RsyncRequest& obj);

typedef struct _RsyncResponse__isset {
  _RsyncResponse__isset() : message(false) {}
  bool message :1;
} _RsyncResponse__isset;

class RsyncResponse : public virtual ::apache::thrift::TBase {
 public:

  RsyncResponse(const RsyncResponse&);
  RsyncResponse& operator=(const RsyncResponse&);
  RsyncResponse() : message() {
  }

  virtual ~RsyncResponse() throw();
  std::string message;

  _RsyncResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const RsyncResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RsyncResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RsyncResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RsyncResponse &a, RsyncResponse &b);

std::ostream& operator<<(std::ostream& out, const RsyncResponse& obj);

typedef struct _TryRequest__isset {
  _TryRequest__isset() : call_func(false), key(false) {}
  bool call_func :1;
  bool key :1;
} _TryRequest__isset;

class TryRequest : public virtual ::apache::thrift::TBase {
 public:

  TryRequest(const TryRequest&);
  TryRequest& operator=(const TryRequest&);
  TryRequest() : call_func(), key() {
  }

  virtual ~TryRequest() throw();
  std::string call_func;
  std::string key;

  _TryRequest__isset __isset;

  void __set_call_func(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const TryRequest & rhs) const
  {
    if (!(call_func == rhs.call_func))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TryRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TryRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TryRequest &a, TryRequest &b);

std::ostream& operator<<(std::ostream& out, const TryRequest& obj);

typedef struct _TryResponse__isset {
  _TryResponse__isset() : message(false) {}
  bool message :1;
} _TryResponse__isset;

class TryResponse : public virtual ::apache::thrift::TBase {
 public:

  TryResponse(const TryResponse&);
  TryResponse& operator=(const TryResponse&);
  TryResponse() : message() {
  }

  virtual ~TryResponse() throw();
  std::string message;

  _TryResponse__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const TryResponse & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TryResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TryResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TryResponse &a, TryResponse &b);

std::ostream& operator<<(std::ostream& out, const TryResponse& obj);

}} // namespace

#endif
